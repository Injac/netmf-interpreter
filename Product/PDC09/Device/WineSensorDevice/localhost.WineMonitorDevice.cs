//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using System.Ext;
using System.Ext.Xml;
using Ws.ServiceModel;
using Ws.Services.Mtom;
using Ws.Services.Serialization;
using XmlElement = Ws.Services.Xml.WsXmlNode;
using XmlAttribute = Ws.Services.Xml.WsXmlAttribute;
using XmlConvert = Ws.Services.Serialization.WsXmlConvert;

namespace localhost.WineMonitorDevice
{
    
    
    [DataContract(Namespace="http://localhost/WineMonitorDevice/")]
    public class RequestUpdate
    {
    }
    
    public class RequestUpdateDataContractSerializer : DataContractSerializer
    {
        
        public RequestUpdateDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public RequestUpdateDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            RequestUpdate RequestUpdateField = null;
            if (IsParentStartElement(reader, false, true))
            {
                RequestUpdateField = new RequestUpdate();
                reader.Read();
                reader.ReadEndElement();
            }
            return RequestUpdateField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            RequestUpdate RequestUpdateField = ((RequestUpdate)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://localhost/WineMonitorDevice/")]
    public class RequestUpdateResponse
    {
    }
    
    public class RequestUpdateResponseDataContractSerializer : DataContractSerializer
    {
        
        public RequestUpdateResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public RequestUpdateResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            RequestUpdateResponse RequestUpdateResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                RequestUpdateResponseField = new RequestUpdateResponse();
                reader.Read();
                reader.ReadEndElement();
            }
            return RequestUpdateResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            RequestUpdateResponse RequestUpdateResponseField = ((RequestUpdateResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://localhost/WineMonitorDevice/")]
    public class SetThresholds
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public schemas.datacontract.org.WineMonitorDevice.WineSensorThresholdReq thresholds;
    }
    
    public class SetThresholdsDataContractSerializer : DataContractSerializer
    {
        
        public SetThresholdsDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public SetThresholdsDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            SetThresholds SetThresholdsField = null;
            if (IsParentStartElement(reader, false, true))
            {
                SetThresholdsField = new SetThresholds();
                reader.Read();
                schemas.datacontract.org.WineMonitorDevice.WineSensorThresholdReqDataContractSerializer thresholdsDCS = new schemas.datacontract.org.WineMonitorDevice.WineSensorThresholdReqDataContractSerializer("thresholds", "http://localhost/WineMonitorDevice/", "http://schemas.datacontract.org/2004/07/WineMonitorDevice");
                SetThresholdsField.thresholds = ((schemas.datacontract.org.WineMonitorDevice.WineSensorThresholdReq)(thresholdsDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return SetThresholdsField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            SetThresholds SetThresholdsField = ((SetThresholds)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.WineMonitorDevice.WineSensorThresholdReqDataContractSerializer thresholdsDCS = new schemas.datacontract.org.WineMonitorDevice.WineSensorThresholdReqDataContractSerializer("thresholds", "http://localhost/WineMonitorDevice/", "http://schemas.datacontract.org/2004/07/WineMonitorDevice");
                thresholdsDCS.WriteObject(writer, SetThresholdsField.thresholds);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://localhost/WineMonitorDevice/")]
    public class SetThresholdsResponse
    {
    }
    
    public class SetThresholdsResponseDataContractSerializer : DataContractSerializer
    {
        
        public SetThresholdsResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public SetThresholdsResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            SetThresholdsResponse SetThresholdsResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                SetThresholdsResponseField = new SetThresholdsResponse();
                reader.Read();
                reader.ReadEndElement();
            }
            return SetThresholdsResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            SetThresholdsResponse SetThresholdsResponseField = ((SetThresholdsResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [ServiceContract(Namespace="http://localhost/WineMonitorDevice/")]
    public interface IIWineMonitorRequest
    {
        
        [OperationContract(Action="http://localhost/WineMonitorDevice/RequestUpdate")]
        RequestUpdateResponse RequestUpdate(RequestUpdate req);
        
        [OperationContract(Action="http://localhost/WineMonitorDevice/SetThresholds")]
        SetThresholdsResponse SetThresholds(SetThresholds req);
    }
}
namespace schemas.datacontract.org.WineMonitorDevice
{
    
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/WineMonitorDevice")]
    public class WineSensorThresholdReq
    {
        
        [DataMember(Order=0, IsRequired=false)]
        public double MaxHumidity;
        
        [DataMember(Order=1, IsRequired=false)]
        public int MaxMinutesWithoutUpdate;
        
        [DataMember(Order=2, IsRequired=false)]
        public double MaxTemperature;
        
        [DataMember(Order=3, IsRequired=false)]
        public double MinHumidity;
        
        [DataMember(Order=4, IsRequired=false)]
        public double MinTemperature;
        
        [DataMember(Order=5, IsRequired=false)]
        public System.DateTime TimeStamp;
    }
    
    public class WineSensorThresholdReqDataContractSerializer : DataContractSerializer
    {
        
        public WineSensorThresholdReqDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public WineSensorThresholdReqDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            WineSensorThresholdReq WineSensorThresholdReqField = null;
            if (IsParentStartElement(reader, false, true))
            {
                WineSensorThresholdReqField = new WineSensorThresholdReq();
                reader.Read();
                if (IsChildStartElement(reader, "MaxHumidity", false, false))
                {
                    reader.Read();
                    WineSensorThresholdReqField.MaxHumidity = XmlConvert.ToDouble(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "MaxMinutesWithoutUpdate", false, false))
                {
                    reader.Read();
                    WineSensorThresholdReqField.MaxMinutesWithoutUpdate = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "MaxTemperature", false, false))
                {
                    reader.Read();
                    WineSensorThresholdReqField.MaxTemperature = XmlConvert.ToDouble(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "MinHumidity", false, false))
                {
                    reader.Read();
                    WineSensorThresholdReqField.MinHumidity = XmlConvert.ToDouble(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "MinTemperature", false, false))
                {
                    reader.Read();
                    WineSensorThresholdReqField.MinTemperature = XmlConvert.ToDouble(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "TimeStamp", false, false))
                {
                    reader.Read();
                    WineSensorThresholdReqField.TimeStamp = XmlConvert.ToDateTime(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return WineSensorThresholdReqField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            WineSensorThresholdReq WineSensorThresholdReqField = ((WineSensorThresholdReq)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "MaxHumidity", false, false, WineSensorThresholdReqField.MaxHumidity))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorThresholdReqField.MaxHumidity));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "MaxMinutesWithoutUpdate", false, false, WineSensorThresholdReqField.MaxMinutesWithoutUpdate))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorThresholdReqField.MaxMinutesWithoutUpdate));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "MaxTemperature", false, false, WineSensorThresholdReqField.MaxTemperature))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorThresholdReqField.MaxTemperature));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "MinHumidity", false, false, WineSensorThresholdReqField.MinHumidity))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorThresholdReqField.MinHumidity));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "MinTemperature", false, false, WineSensorThresholdReqField.MinTemperature))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorThresholdReqField.MinTemperature));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "TimeStamp", false, false, WineSensorThresholdReqField.TimeStamp))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorThresholdReqField.TimeStamp));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
}
