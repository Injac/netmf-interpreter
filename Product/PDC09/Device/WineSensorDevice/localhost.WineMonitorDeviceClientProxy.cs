//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using Dpws.Client;
using Dpws.Client.Discovery;
using Dpws.Client.Eventing;
using Dpws.Client.Transport;
using Ws.Services;
using Ws.Services.Utilities;
using Ws.Services.WsaAddressing;
using Ws.Services.Xml;

namespace localhost.WineMonitorDevice
{
    
    
    public class IWineMonitorRequestClientProxy : DpwsClient
    {
        
        public string ServiceEndpoint = null;
        
        private DpwsHttpClient m_httpClient = new DpwsHttpClient();
        
        public IWineMonitorRequestClientProxy()
        {
            Init();
        }
        
        public IWineMonitorRequestClientProxy(int port) : 
                base(port)
        {
            Init();
        }
        
        public virtual void Init()
        {

            // // Set client endpoint address
            EndpointAddress = "urn:uuid:89d28802-8573-4c35-9c83-bd7faef59dde";
        }
        
        public virtual RequestUpdateResponse RequestUpdate(RequestUpdate req)
        {

            // Create request header
            String action;
            action = "http://localhost/WineMonitorDevice/RequestUpdate";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, ServiceEndpoint, null, EndpointAddress, null);

            // Create request serializer
            RequestUpdateDataContractSerializer reqDcs;
            reqDcs = new RequestUpdateDataContractSerializer("RequestUpdate", "http://localhost/WineMonitorDevice/");

            // Build soap request message
            byte[] soapBuffer = SoapMessageBuilder.BuildSoapMessage(header, reqDcs, req);

            // Send service request
            DpwsSoapResponse response;
            response = m_httpClient.SendRequest(soapBuffer, ServiceEndpoint, false, false);

            // Process response
            RequestUpdateResponseDataContractSerializer respDcs;
            respDcs = new RequestUpdateResponseDataContractSerializer("RequestUpdateResponse", "http://localhost/WineMonitorDevice/");
            RequestUpdateResponse resp;
            resp = ((RequestUpdateResponse)(respDcs.ReadObject(response.Reader)));
            return resp;
        }
        
        public virtual SetThresholdsResponse SetThresholds(SetThresholds req)
        {

            // Create request header
            String action;
            action = "http://localhost/WineMonitorDevice/SetThresholds";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, ServiceEndpoint, null, EndpointAddress, null);

            // Create request serializer
            SetThresholdsDataContractSerializer reqDcs;
            reqDcs = new SetThresholdsDataContractSerializer("SetThresholds", "http://localhost/WineMonitorDevice/");

            // Build soap request message
            byte[] soapBuffer = SoapMessageBuilder.BuildSoapMessage(header, reqDcs, req);

            // Send service request
            DpwsSoapResponse response;
            response = m_httpClient.SendRequest(soapBuffer, ServiceEndpoint, false, false);

            // Process response
            SetThresholdsResponseDataContractSerializer respDcs;
            respDcs = new SetThresholdsResponseDataContractSerializer("SetThresholdsResponse", "http://localhost/WineMonitorDevice/");
            SetThresholdsResponse resp;
            resp = ((SetThresholdsResponse)(respDcs.ReadObject(response.Reader)));
            return resp;
        }
    }
}
