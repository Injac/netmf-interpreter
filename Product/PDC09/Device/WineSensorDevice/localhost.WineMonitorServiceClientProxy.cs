//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using Dpws.Client;
using Dpws.Client.Discovery;
using Dpws.Client.Eventing;
using Dpws.Client.Transport;
using Ws.Services;
using Ws.Services.Utilities;
using Ws.Services.WsaAddressing;
using Ws.Services.Xml;

namespace localhost.WineMonitorService
{
    
    
    public class IWineMonitorUpdateClientProxy : DpwsClient
    {
        
        public string ServiceEndpoint = null;
        
        private DpwsHttpClient m_httpClient = new DpwsHttpClient();
        
        public IWineMonitorUpdateClientProxy()
        {
            Init();
        }
        
        public IWineMonitorUpdateClientProxy(int port) : 
                base(port)
        {
            Init();
        }
        
        public virtual void Init()
        {

            // // Set client endpoint address
            EndpointAddress = "urn:uuid:d5789979-cda3-4b1a-97fe-81ed82c129bd";
        }
        
        public virtual RegisterWineCabinetResponse RegisterWineCabinet(RegisterWineCabinet req)
        {

            // Create request header
            String action;
            action = "http://localhost/WineMonitorService/IWineMonitorUpdate/RegisterWineCabinet";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, ServiceEndpoint, null, EndpointAddress, null);

            // Create request serializer
            RegisterWineCabinetDataContractSerializer reqDcs;
            reqDcs = new RegisterWineCabinetDataContractSerializer("RegisterWineCabinet", "http://localhost/WineMonitorService/");

            // Build soap request message
            byte[] soapBuffer = SoapMessageBuilder.BuildSoapMessage(header, reqDcs, req);

            // Send service request
            DpwsSoapResponse response;
            response = m_httpClient.SendRequest(soapBuffer, ServiceEndpoint, false, false);

            // Process response
            RegisterWineCabinetResponseDataContractSerializer respDcs;
            respDcs = new RegisterWineCabinetResponseDataContractSerializer("RegisterWineCabinetResponse", "http://localhost/WineMonitorService/");
            RegisterWineCabinetResponse resp;
            resp = ((RegisterWineCabinetResponse)(respDcs.ReadObject(response.Reader)));
            return resp;
        }
        
        public virtual UpdateSensorDataResponse UpdateSensorData(UpdateSensorData req)
        {

            // Create request header
            String action;
            action = "http://localhost/WineMonitorService/IWineMonitorUpdate/UpdateSensorData";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, ServiceEndpoint, null, EndpointAddress, null);

            // Create request serializer
            UpdateSensorDataDataContractSerializer reqDcs;
            reqDcs = new UpdateSensorDataDataContractSerializer("UpdateSensorData", "http://localhost/WineMonitorService/");

            // Build soap request message
            byte[] soapBuffer = SoapMessageBuilder.BuildSoapMessage(header, reqDcs, req);

            // Send service request
            DpwsSoapResponse response;
            response = m_httpClient.SendRequest(soapBuffer, ServiceEndpoint, false, false);

            // Process response
            UpdateSensorDataResponseDataContractSerializer respDcs;
            respDcs = new UpdateSensorDataResponseDataContractSerializer("UpdateSensorDataResponse", "http://localhost/WineMonitorService/");
            UpdateSensorDataResponse resp;
            resp = ((UpdateSensorDataResponse)(respDcs.ReadObject(response.Reader)));
            return resp;
        }
        
        public virtual UpdateThresholdsResponse UpdateThresholds(UpdateThresholds req)
        {

            // Create request header
            String action;
            action = "http://localhost/WineMonitorService/IWineMonitorUpdate/UpdateThresholds";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, ServiceEndpoint, null, EndpointAddress, null);

            // Create request serializer
            UpdateThresholdsDataContractSerializer reqDcs;
            reqDcs = new UpdateThresholdsDataContractSerializer("UpdateThresholds", "http://localhost/WineMonitorService/");

            // Build soap request message
            byte[] soapBuffer = SoapMessageBuilder.BuildSoapMessage(header, reqDcs, req);

            // Send service request
            DpwsSoapResponse response;
            response = m_httpClient.SendRequest(soapBuffer, ServiceEndpoint, false, false);

            // Process response
            UpdateThresholdsResponseDataContractSerializer respDcs;
            respDcs = new UpdateThresholdsResponseDataContractSerializer("UpdateThresholdsResponse", "http://localhost/WineMonitorService/");
            UpdateThresholdsResponse resp;
            resp = ((UpdateThresholdsResponse)(respDcs.ReadObject(response.Reader)));
            return resp;
        }
        
        public virtual AlertResponse Alert(Alert req)
        {

            // Create request header
            String action;
            action = "http://localhost/WineMonitorService/IWineMonitorUpdate/Alert";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, ServiceEndpoint, null, EndpointAddress, null);

            // Create request serializer
            AlertDataContractSerializer reqDcs;
            reqDcs = new AlertDataContractSerializer("Alert", "http://localhost/WineMonitorService/");

            // Build soap request message
            byte[] soapBuffer = SoapMessageBuilder.BuildSoapMessage(header, reqDcs, req);

            System.Ext.Console.Write(new string(System.Text.UTF8Encoding.UTF8.GetChars(soapBuffer)));
            //soapBuffer = System.Text.UTF8Encoding.UTF8.GetBytes("<?xml version='1.0' encoding='UTF-8'?><soap:Envelope xmlns:soap='http://www.w3.org/2003/05/soap-envelope' xmlns:wsa='http://www.w3.org/2005/08/addressing' xmlns:wsdp='http://schemas.xmlsoap.org/ws/2006/02/devprof' ><soap:Header><wsa:To soap:mustUnderstand=\"1\">http://localhost:52305/WineMonitorUpdate.svc</wsa:To><wsa:Action soap:mustUnderstand=\"1\">http://localhost/WineMonitorService/IWineMonitorUpdate/Alert</wsa:Action><wsa:MessageID>urn:uuid:10220fbe-fdf6-38a3-6ba9-7f3b45a8127b</wsa:MessageID><wsa:From><wsa:Address>urn:uuid:d5789979-cda3-4b1a-97fe-81ed82c129bd</wsa:Address></wsa:From></soap:Header><soap:Body><Alert xmlns=\"http://localhost/WineMonitorService/\"><cabinetId>NetMFWineCabinet</cabinetId><alert xmlns:b1=\"http://schemas.datacontract.org/2004/07/WineMonitorService\"><b1:Alert>TempHigh</b1:Alert><b1:AlertValue>74.543617627370921</b1:AlertValue><b1:TimeStamp>2009-11-06T23:09:09.19Z</b1:TimeStamp></alert></Alert></soap:Body></soap:Envelope>");

            // Send service request
            DpwsSoapResponse response;
            response = m_httpClient.SendRequest(soapBuffer, ServiceEndpoint, false, false);

            // Process response
            AlertResponseDataContractSerializer respDcs;
            respDcs = new AlertResponseDataContractSerializer("AlertResponse", "http://localhost/WineMonitorService/");
            AlertResponse resp;
            resp = ((AlertResponse)(respDcs.ReadObject(response.Reader)));
            return resp;
        }
    }
}
