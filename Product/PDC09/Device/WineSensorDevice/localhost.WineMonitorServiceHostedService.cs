//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Text;
using System.Xml;
using Dpws.Device;
using Dpws.Device.Services;
using Ws.Services;
using Ws.Services.WsaAddressing;
using Ws.Services.Xml;

namespace localhost.WineMonitorService
{
    
    
    public class IWineMonitorUpdate : DpwsHostedService
    {
        
        private IIWineMonitorUpdate m_service = null;
        
        public IWineMonitorUpdate(IIWineMonitorUpdate service)
        {
            // Set the service implementation properties
            m_service = service;

            // Set base service properties
            ServiceNamespace = new WsXmlNamespace("iwi", "http://localhost/WineMonitorService/");
            ServiceID = "urn:uuid:cbd12e27-fc1f-44fa-bd8b-9726738507aa";
            ServiceTypeName = "IWineMonitorUpdate";

            // Add service types here
            ServiceOperations.Add(new WsServiceOperation("http://localhost/WineMonitorService/IWineMonitorUpdate", "RegisterWineCabinet"));
            ServiceOperations.Add(new WsServiceOperation("http://localhost/WineMonitorService/IWineMonitorUpdate", "UpdateSensorData"));
            ServiceOperations.Add(new WsServiceOperation("http://localhost/WineMonitorService/IWineMonitorUpdate", "UpdateThresholds"));
            ServiceOperations.Add(new WsServiceOperation("http://localhost/WineMonitorService/IWineMonitorUpdate", "Alert"));

            // Add event sources here
        }
        
        public virtual Byte[] RegisterWineCabinet(WsWsaHeader header, XmlReader reader)
        {
            // Build request object
            RegisterWineCabinetDataContractSerializer reqDcs;
            reqDcs = new RegisterWineCabinetDataContractSerializer("RegisterWineCabinet", "http://localhost/WineMonitorService/");
            RegisterWineCabinet req;
            req = ((RegisterWineCabinet)(reqDcs.ReadObject(reader)));

            // Create response object
            // Call service operation to process request and return response.
            RegisterWineCabinetResponse resp;
            resp = m_service.RegisterWineCabinet(req);

            // Create response header
            WsWsaHeader respHeader = new WsWsaHeader("http://localhost/WineMonitorService/IWineMonitorUpdate/RegisterWineCabinetRespons" +
                    "e", header.MessageID, WsWellKnownUri.WsaAnonymousUri, null, null, null);

            // Create response serializer
            RegisterWineCabinetResponseDataContractSerializer respDcs;
            respDcs = new RegisterWineCabinetResponseDataContractSerializer("RegisterWineCabinetResponse", "http://localhost/WineMonitorService/");

            // Build response message and return
            return SoapMessageBuilder.BuildSoapMessage(respHeader, respDcs, resp);
        }
        
        public virtual Byte[] UpdateSensorData(WsWsaHeader header, XmlReader reader)
        {
            // Build request object
            UpdateSensorDataDataContractSerializer reqDcs;
            reqDcs = new UpdateSensorDataDataContractSerializer("UpdateSensorData", "http://localhost/WineMonitorService/");
            UpdateSensorData req;
            req = ((UpdateSensorData)(reqDcs.ReadObject(reader)));

            // Create response object
            // Call service operation to process request and return response.
            UpdateSensorDataResponse resp;
            resp = m_service.UpdateSensorData(req);

            // Create response header
            WsWsaHeader respHeader = new WsWsaHeader("http://localhost/WineMonitorService/IWineMonitorUpdate/UpdateSensorDataResponse", header.MessageID, WsWellKnownUri.WsaAnonymousUri, null, null, null);

            // Create response serializer
            UpdateSensorDataResponseDataContractSerializer respDcs;
            respDcs = new UpdateSensorDataResponseDataContractSerializer("UpdateSensorDataResponse", "http://localhost/WineMonitorService/");

            // Build response message and return
            return SoapMessageBuilder.BuildSoapMessage(respHeader, respDcs, resp);
        }
        
        public virtual Byte[] UpdateThresholds(WsWsaHeader header, XmlReader reader)
        {
            // Build request object
            UpdateThresholdsDataContractSerializer reqDcs;
            reqDcs = new UpdateThresholdsDataContractSerializer("UpdateThresholds", "http://localhost/WineMonitorService/");
            UpdateThresholds req;
            req = ((UpdateThresholds)(reqDcs.ReadObject(reader)));

            // Create response object
            // Call service operation to process request and return response.
            UpdateThresholdsResponse resp;
            resp = m_service.UpdateThresholds(req);

            // Create response header
            WsWsaHeader respHeader = new WsWsaHeader("http://localhost/WineMonitorService/IWineMonitorUpdate/UpdateThresholdsResponse", header.MessageID, WsWellKnownUri.WsaAnonymousUri, null, null, null);

            // Create response serializer
            UpdateThresholdsResponseDataContractSerializer respDcs;
            respDcs = new UpdateThresholdsResponseDataContractSerializer("UpdateThresholdsResponse", "http://localhost/WineMonitorService/");

            // Build response message and return
            return SoapMessageBuilder.BuildSoapMessage(respHeader, respDcs, resp);
        }
        
        public virtual Byte[] Alert(WsWsaHeader header, XmlReader reader)
        {
            // Build request object
            AlertDataContractSerializer reqDcs;
            reqDcs = new AlertDataContractSerializer("Alert", "http://localhost/WineMonitorService/");
            Alert req;
            req = ((Alert)(reqDcs.ReadObject(reader)));

            // Create response object
            // Call service operation to process request and return response.
            AlertResponse resp;
            resp = m_service.Alert(req);

            // Create response header
            WsWsaHeader respHeader = new WsWsaHeader("http://localhost/WineMonitorService/IWineMonitorUpdate/AlertResponse", header.MessageID, WsWellKnownUri.WsaAnonymousUri, null, null, null);

            // Create response serializer
            AlertResponseDataContractSerializer respDcs;
            respDcs = new AlertResponseDataContractSerializer("AlertResponse", "http://localhost/WineMonitorService/");

            // Build response message and return
            return SoapMessageBuilder.BuildSoapMessage(respHeader, respDcs, resp);
        }
    }
}
