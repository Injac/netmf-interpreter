//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace SilverlightWineMonitorApp.WineMonitorService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WineSensorData", Namespace="http://schemas.datacontract.org/2004/07/WineMonitorService")]
    public partial class WineSensorData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double HumidityField;
        
        private double TemperatureField;
        
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Humidity {
            get {
                return this.HumidityField;
            }
            set {
                if ((this.HumidityField.Equals(value) != true)) {
                    this.HumidityField = value;
                    this.RaisePropertyChanged("Humidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlertData", Namespace="http://schemas.datacontract.org/2004/07/WineMonitorService")]
    public partial class AlertData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SilverlightWineMonitorApp.WineMonitorService.AlertFlags AlertField;
        
        private double AlertValueField;
        
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightWineMonitorApp.WineMonitorService.AlertFlags Alert {
            get {
                return this.AlertField;
            }
            set {
                if ((this.AlertField.Equals(value) != true)) {
                    this.AlertField = value;
                    this.RaisePropertyChanged("Alert");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AlertValue {
            get {
                return this.AlertValueField;
            }
            set {
                if ((this.AlertValueField.Equals(value) != true)) {
                    this.AlertValueField = value;
                    this.RaisePropertyChanged("AlertValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlertFlags", Namespace="http://schemas.datacontract.org/2004/07/WineMonitorService")]
    public enum AlertFlags : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TempHigh = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TempLow = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HumidHigh = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HumidLow = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoComm = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WineSensorThreshold", Namespace="http://schemas.datacontract.org/2004/07/WineMonitorService")]
    public partial class WineSensorThreshold : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double MaxHumidityField;
        
        private int MaxMinutesWithoutUpdateField;
        
        private double MaxTemperatureField;
        
        private double MinHumidityField;
        
        private double MinTemperatureField;
        
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxHumidity {
            get {
                return this.MaxHumidityField;
            }
            set {
                if ((this.MaxHumidityField.Equals(value) != true)) {
                    this.MaxHumidityField = value;
                    this.RaisePropertyChanged("MaxHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxMinutesWithoutUpdate {
            get {
                return this.MaxMinutesWithoutUpdateField;
            }
            set {
                if ((this.MaxMinutesWithoutUpdateField.Equals(value) != true)) {
                    this.MaxMinutesWithoutUpdateField = value;
                    this.RaisePropertyChanged("MaxMinutesWithoutUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxTemperature {
            get {
                return this.MaxTemperatureField;
            }
            set {
                if ((this.MaxTemperatureField.Equals(value) != true)) {
                    this.MaxTemperatureField = value;
                    this.RaisePropertyChanged("MaxTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinHumidity {
            get {
                return this.MinHumidityField;
            }
            set {
                if ((this.MinHumidityField.Equals(value) != true)) {
                    this.MinHumidityField = value;
                    this.RaisePropertyChanged("MinHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinTemperature {
            get {
                return this.MinTemperatureField;
            }
            set {
                if ((this.MinTemperatureField.Equals(value) != true)) {
                    this.MinTemperatureField = value;
                    this.RaisePropertyChanged("MinTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CabinetItem", Namespace="http://schemas.datacontract.org/2004/07/WineMonitorService")]
    public partial class CabinetItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CabinetField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cabinet {
            get {
                return this.CabinetField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetField, value) != true)) {
                    this.CabinetField = value;
                    this.RaisePropertyChanged("Cabinet");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost/WineMonitorService/", ConfigurationName="WineMonitorService.IWineMonitor")]
    public interface IWineMonitor {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost/WineMonitorService/IWineMonitor/GetSensorData", ReplyAction="http://localhost/WineMonitorService/IWineMonitor/GetSensorDataResponse")]
        System.IAsyncResult BeginGetSensorData(string cabinetId, System.AsyncCallback callback, object asyncState);
        
        SilverlightWineMonitorApp.WineMonitorService.WineSensorData EndGetSensorData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost/WineMonitorService/IWineMonitor/GetAlert", ReplyAction="http://localhost/WineMonitorService/IWineMonitor/GetAlertResponse")]
        System.IAsyncResult BeginGetAlert(string cabinetId, System.AsyncCallback callback, object asyncState);
        
        SilverlightWineMonitorApp.WineMonitorService.AlertData EndGetAlert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost/WineMonitorService/IWineMonitor/GetThresholdValues", ReplyAction="http://localhost/WineMonitorService/IWineMonitor/GetThresholdValuesResponse")]
        System.IAsyncResult BeginGetThresholdValues(string cabinetId, System.AsyncCallback callback, object asyncState);
        
        SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold EndGetThresholdValues(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost/WineMonitorService/IWineMonitor/GetWineSensorDataHistory", ReplyAction="http://localhost/WineMonitorService/IWineMonitor/GetWineSensorDataHistoryResponse" +
            "")]
        System.IAsyncResult BeginGetWineSensorDataHistory(string cabinetId, System.DateTime dataSince, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorData> EndGetWineSensorDataHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost/WineMonitorService/IWineMonitor/GetAlertHistory", ReplyAction="http://localhost/WineMonitorService/IWineMonitor/GetAlertHistoryResponse")]
        System.IAsyncResult BeginGetAlertHistory(string cabinetId, System.DateTime alertsSince, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.AlertData> EndGetAlertHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost/WineMonitorService/IWineMonitor/GetThresholdHistory", ReplyAction="http://localhost/WineMonitorService/IWineMonitor/GetThresholdHistoryResponse")]
        System.IAsyncResult BeginGetThresholdHistory(string cabinetId, System.DateTime changesSince, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold> EndGetThresholdHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost/WineMonitorService/IWineMonitor/GetWineCabinets", ReplyAction="http://localhost/WineMonitorService/IWineMonitor/GetWineCabinetsResponse")]
        System.IAsyncResult BeginGetWineCabinets(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.CabinetItem> EndGetWineCabinets(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost/WineMonitorService/IWineMonitor/ChangeThresholds", ReplyAction="http://localhost/WineMonitorService/IWineMonitor/ChangeThresholdsResponse")]
        System.IAsyncResult BeginChangeThresholds(string cabinetId, SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold data, System.AsyncCallback callback, object asyncState);
        
        void EndChangeThresholds(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IWineMonitorChannel : SilverlightWineMonitorApp.WineMonitorService.IWineMonitor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetSensorDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSensorDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightWineMonitorApp.WineMonitorService.WineSensorData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightWineMonitorApp.WineMonitorService.WineSensorData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightWineMonitorApp.WineMonitorService.AlertData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightWineMonitorApp.WineMonitorService.AlertData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetThresholdValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetThresholdValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetWineSensorDataHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWineSensorDataHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAlertHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlertHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.AlertData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.AlertData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetThresholdHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetThresholdHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetWineCabinetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWineCabinetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.CabinetItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.CabinetItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WineMonitorClient : System.ServiceModel.ClientBase<SilverlightWineMonitorApp.WineMonitorService.IWineMonitor>, SilverlightWineMonitorApp.WineMonitorService.IWineMonitor {
        
        private BeginOperationDelegate onBeginGetSensorDataDelegate;
        
        private EndOperationDelegate onEndGetSensorDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetSensorDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlertDelegate;
        
        private EndOperationDelegate onEndGetAlertDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlertCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetThresholdValuesDelegate;
        
        private EndOperationDelegate onEndGetThresholdValuesDelegate;
        
        private System.Threading.SendOrPostCallback onGetThresholdValuesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWineSensorDataHistoryDelegate;
        
        private EndOperationDelegate onEndGetWineSensorDataHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetWineSensorDataHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlertHistoryDelegate;
        
        private EndOperationDelegate onEndGetAlertHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlertHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetThresholdHistoryDelegate;
        
        private EndOperationDelegate onEndGetThresholdHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetThresholdHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWineCabinetsDelegate;
        
        private EndOperationDelegate onEndGetWineCabinetsDelegate;
        
        private System.Threading.SendOrPostCallback onGetWineCabinetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeThresholdsDelegate;
        
        private EndOperationDelegate onEndChangeThresholdsDelegate;
        
        private System.Threading.SendOrPostCallback onChangeThresholdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WineMonitorClient() {
        }
        
        public WineMonitorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WineMonitorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WineMonitorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WineMonitorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSensorDataCompletedEventArgs> GetSensorDataCompleted;
        
        public event System.EventHandler<GetAlertCompletedEventArgs> GetAlertCompleted;
        
        public event System.EventHandler<GetThresholdValuesCompletedEventArgs> GetThresholdValuesCompleted;
        
        public event System.EventHandler<GetWineSensorDataHistoryCompletedEventArgs> GetWineSensorDataHistoryCompleted;
        
        public event System.EventHandler<GetAlertHistoryCompletedEventArgs> GetAlertHistoryCompleted;
        
        public event System.EventHandler<GetThresholdHistoryCompletedEventArgs> GetThresholdHistoryCompleted;
        
        public event System.EventHandler<GetWineCabinetsCompletedEventArgs> GetWineCabinetsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeThresholdsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.BeginGetSensorData(string cabinetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSensorData(cabinetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightWineMonitorApp.WineMonitorService.WineSensorData SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.EndGetSensorData(System.IAsyncResult result) {
            return base.Channel.EndGetSensorData(result);
        }
        
        private System.IAsyncResult OnBeginGetSensorData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cabinetId = ((string)(inValues[0]));
            return ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).BeginGetSensorData(cabinetId, callback, asyncState);
        }
        
        private object[] OnEndGetSensorData(System.IAsyncResult result) {
            SilverlightWineMonitorApp.WineMonitorService.WineSensorData retVal = ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).EndGetSensorData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSensorDataCompleted(object state) {
            if ((this.GetSensorDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSensorDataCompleted(this, new GetSensorDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSensorDataAsync(string cabinetId) {
            this.GetSensorDataAsync(cabinetId, null);
        }
        
        public void GetSensorDataAsync(string cabinetId, object userState) {
            if ((this.onBeginGetSensorDataDelegate == null)) {
                this.onBeginGetSensorDataDelegate = new BeginOperationDelegate(this.OnBeginGetSensorData);
            }
            if ((this.onEndGetSensorDataDelegate == null)) {
                this.onEndGetSensorDataDelegate = new EndOperationDelegate(this.OnEndGetSensorData);
            }
            if ((this.onGetSensorDataCompletedDelegate == null)) {
                this.onGetSensorDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSensorDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetSensorDataDelegate, new object[] {
                        cabinetId}, this.onEndGetSensorDataDelegate, this.onGetSensorDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.BeginGetAlert(string cabinetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlert(cabinetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightWineMonitorApp.WineMonitorService.AlertData SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.EndGetAlert(System.IAsyncResult result) {
            return base.Channel.EndGetAlert(result);
        }
        
        private System.IAsyncResult OnBeginGetAlert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cabinetId = ((string)(inValues[0]));
            return ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).BeginGetAlert(cabinetId, callback, asyncState);
        }
        
        private object[] OnEndGetAlert(System.IAsyncResult result) {
            SilverlightWineMonitorApp.WineMonitorService.AlertData retVal = ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).EndGetAlert(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlertCompleted(object state) {
            if ((this.GetAlertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlertCompleted(this, new GetAlertCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlertAsync(string cabinetId) {
            this.GetAlertAsync(cabinetId, null);
        }
        
        public void GetAlertAsync(string cabinetId, object userState) {
            if ((this.onBeginGetAlertDelegate == null)) {
                this.onBeginGetAlertDelegate = new BeginOperationDelegate(this.OnBeginGetAlert);
            }
            if ((this.onEndGetAlertDelegate == null)) {
                this.onEndGetAlertDelegate = new EndOperationDelegate(this.OnEndGetAlert);
            }
            if ((this.onGetAlertCompletedDelegate == null)) {
                this.onGetAlertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlertCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlertDelegate, new object[] {
                        cabinetId}, this.onEndGetAlertDelegate, this.onGetAlertCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.BeginGetThresholdValues(string cabinetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetThresholdValues(cabinetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.EndGetThresholdValues(System.IAsyncResult result) {
            return base.Channel.EndGetThresholdValues(result);
        }
        
        private System.IAsyncResult OnBeginGetThresholdValues(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cabinetId = ((string)(inValues[0]));
            return ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).BeginGetThresholdValues(cabinetId, callback, asyncState);
        }
        
        private object[] OnEndGetThresholdValues(System.IAsyncResult result) {
            SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold retVal = ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).EndGetThresholdValues(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetThresholdValuesCompleted(object state) {
            if ((this.GetThresholdValuesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetThresholdValuesCompleted(this, new GetThresholdValuesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetThresholdValuesAsync(string cabinetId) {
            this.GetThresholdValuesAsync(cabinetId, null);
        }
        
        public void GetThresholdValuesAsync(string cabinetId, object userState) {
            if ((this.onBeginGetThresholdValuesDelegate == null)) {
                this.onBeginGetThresholdValuesDelegate = new BeginOperationDelegate(this.OnBeginGetThresholdValues);
            }
            if ((this.onEndGetThresholdValuesDelegate == null)) {
                this.onEndGetThresholdValuesDelegate = new EndOperationDelegate(this.OnEndGetThresholdValues);
            }
            if ((this.onGetThresholdValuesCompletedDelegate == null)) {
                this.onGetThresholdValuesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetThresholdValuesCompleted);
            }
            base.InvokeAsync(this.onBeginGetThresholdValuesDelegate, new object[] {
                        cabinetId}, this.onEndGetThresholdValuesDelegate, this.onGetThresholdValuesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.BeginGetWineSensorDataHistory(string cabinetId, System.DateTime dataSince, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWineSensorDataHistory(cabinetId, dataSince, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorData> SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.EndGetWineSensorDataHistory(System.IAsyncResult result) {
            return base.Channel.EndGetWineSensorDataHistory(result);
        }
        
        private System.IAsyncResult OnBeginGetWineSensorDataHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cabinetId = ((string)(inValues[0]));
            System.DateTime dataSince = ((System.DateTime)(inValues[1]));
            return ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).BeginGetWineSensorDataHistory(cabinetId, dataSince, callback, asyncState);
        }
        
        private object[] OnEndGetWineSensorDataHistory(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorData> retVal = ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).EndGetWineSensorDataHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWineSensorDataHistoryCompleted(object state) {
            if ((this.GetWineSensorDataHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWineSensorDataHistoryCompleted(this, new GetWineSensorDataHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWineSensorDataHistoryAsync(string cabinetId, System.DateTime dataSince) {
            this.GetWineSensorDataHistoryAsync(cabinetId, dataSince, null);
        }
        
        public void GetWineSensorDataHistoryAsync(string cabinetId, System.DateTime dataSince, object userState) {
            if ((this.onBeginGetWineSensorDataHistoryDelegate == null)) {
                this.onBeginGetWineSensorDataHistoryDelegate = new BeginOperationDelegate(this.OnBeginGetWineSensorDataHistory);
            }
            if ((this.onEndGetWineSensorDataHistoryDelegate == null)) {
                this.onEndGetWineSensorDataHistoryDelegate = new EndOperationDelegate(this.OnEndGetWineSensorDataHistory);
            }
            if ((this.onGetWineSensorDataHistoryCompletedDelegate == null)) {
                this.onGetWineSensorDataHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWineSensorDataHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetWineSensorDataHistoryDelegate, new object[] {
                        cabinetId,
                        dataSince}, this.onEndGetWineSensorDataHistoryDelegate, this.onGetWineSensorDataHistoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.BeginGetAlertHistory(string cabinetId, System.DateTime alertsSince, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlertHistory(cabinetId, alertsSince, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.AlertData> SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.EndGetAlertHistory(System.IAsyncResult result) {
            return base.Channel.EndGetAlertHistory(result);
        }
        
        private System.IAsyncResult OnBeginGetAlertHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cabinetId = ((string)(inValues[0]));
            System.DateTime alertsSince = ((System.DateTime)(inValues[1]));
            return ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).BeginGetAlertHistory(cabinetId, alertsSince, callback, asyncState);
        }
        
        private object[] OnEndGetAlertHistory(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.AlertData> retVal = ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).EndGetAlertHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlertHistoryCompleted(object state) {
            if ((this.GetAlertHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlertHistoryCompleted(this, new GetAlertHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlertHistoryAsync(string cabinetId, System.DateTime alertsSince) {
            this.GetAlertHistoryAsync(cabinetId, alertsSince, null);
        }
        
        public void GetAlertHistoryAsync(string cabinetId, System.DateTime alertsSince, object userState) {
            if ((this.onBeginGetAlertHistoryDelegate == null)) {
                this.onBeginGetAlertHistoryDelegate = new BeginOperationDelegate(this.OnBeginGetAlertHistory);
            }
            if ((this.onEndGetAlertHistoryDelegate == null)) {
                this.onEndGetAlertHistoryDelegate = new EndOperationDelegate(this.OnEndGetAlertHistory);
            }
            if ((this.onGetAlertHistoryCompletedDelegate == null)) {
                this.onGetAlertHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlertHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlertHistoryDelegate, new object[] {
                        cabinetId,
                        alertsSince}, this.onEndGetAlertHistoryDelegate, this.onGetAlertHistoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.BeginGetThresholdHistory(string cabinetId, System.DateTime changesSince, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetThresholdHistory(cabinetId, changesSince, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold> SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.EndGetThresholdHistory(System.IAsyncResult result) {
            return base.Channel.EndGetThresholdHistory(result);
        }
        
        private System.IAsyncResult OnBeginGetThresholdHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cabinetId = ((string)(inValues[0]));
            System.DateTime changesSince = ((System.DateTime)(inValues[1]));
            return ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).BeginGetThresholdHistory(cabinetId, changesSince, callback, asyncState);
        }
        
        private object[] OnEndGetThresholdHistory(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold> retVal = ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).EndGetThresholdHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetThresholdHistoryCompleted(object state) {
            if ((this.GetThresholdHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetThresholdHistoryCompleted(this, new GetThresholdHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetThresholdHistoryAsync(string cabinetId, System.DateTime changesSince) {
            this.GetThresholdHistoryAsync(cabinetId, changesSince, null);
        }
        
        public void GetThresholdHistoryAsync(string cabinetId, System.DateTime changesSince, object userState) {
            if ((this.onBeginGetThresholdHistoryDelegate == null)) {
                this.onBeginGetThresholdHistoryDelegate = new BeginOperationDelegate(this.OnBeginGetThresholdHistory);
            }
            if ((this.onEndGetThresholdHistoryDelegate == null)) {
                this.onEndGetThresholdHistoryDelegate = new EndOperationDelegate(this.OnEndGetThresholdHistory);
            }
            if ((this.onGetThresholdHistoryCompletedDelegate == null)) {
                this.onGetThresholdHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetThresholdHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetThresholdHistoryDelegate, new object[] {
                        cabinetId,
                        changesSince}, this.onEndGetThresholdHistoryDelegate, this.onGetThresholdHistoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.BeginGetWineCabinets(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWineCabinets(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.CabinetItem> SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.EndGetWineCabinets(System.IAsyncResult result) {
            return base.Channel.EndGetWineCabinets(result);
        }
        
        private System.IAsyncResult OnBeginGetWineCabinets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).BeginGetWineCabinets(callback, asyncState);
        }
        
        private object[] OnEndGetWineCabinets(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.CabinetItem> retVal = ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).EndGetWineCabinets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWineCabinetsCompleted(object state) {
            if ((this.GetWineCabinetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWineCabinetsCompleted(this, new GetWineCabinetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWineCabinetsAsync() {
            this.GetWineCabinetsAsync(null);
        }
        
        public void GetWineCabinetsAsync(object userState) {
            if ((this.onBeginGetWineCabinetsDelegate == null)) {
                this.onBeginGetWineCabinetsDelegate = new BeginOperationDelegate(this.OnBeginGetWineCabinets);
            }
            if ((this.onEndGetWineCabinetsDelegate == null)) {
                this.onEndGetWineCabinetsDelegate = new EndOperationDelegate(this.OnEndGetWineCabinets);
            }
            if ((this.onGetWineCabinetsCompletedDelegate == null)) {
                this.onGetWineCabinetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWineCabinetsCompleted);
            }
            base.InvokeAsync(this.onBeginGetWineCabinetsDelegate, null, this.onEndGetWineCabinetsDelegate, this.onGetWineCabinetsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.BeginChangeThresholds(string cabinetId, SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeThresholds(cabinetId, data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightWineMonitorApp.WineMonitorService.IWineMonitor.EndChangeThresholds(System.IAsyncResult result) {
            base.Channel.EndChangeThresholds(result);
        }
        
        private System.IAsyncResult OnBeginChangeThresholds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cabinetId = ((string)(inValues[0]));
            SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold data = ((SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold)(inValues[1]));
            return ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).BeginChangeThresholds(cabinetId, data, callback, asyncState);
        }
        
        private object[] OnEndChangeThresholds(System.IAsyncResult result) {
            ((SilverlightWineMonitorApp.WineMonitorService.IWineMonitor)(this)).EndChangeThresholds(result);
            return null;
        }
        
        private void OnChangeThresholdsCompleted(object state) {
            if ((this.ChangeThresholdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeThresholdsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeThresholdsAsync(string cabinetId, SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold data) {
            this.ChangeThresholdsAsync(cabinetId, data, null);
        }
        
        public void ChangeThresholdsAsync(string cabinetId, SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold data, object userState) {
            if ((this.onBeginChangeThresholdsDelegate == null)) {
                this.onBeginChangeThresholdsDelegate = new BeginOperationDelegate(this.OnBeginChangeThresholds);
            }
            if ((this.onEndChangeThresholdsDelegate == null)) {
                this.onEndChangeThresholdsDelegate = new EndOperationDelegate(this.OnEndChangeThresholds);
            }
            if ((this.onChangeThresholdsCompletedDelegate == null)) {
                this.onChangeThresholdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeThresholdsCompleted);
            }
            base.InvokeAsync(this.onBeginChangeThresholdsDelegate, new object[] {
                        cabinetId,
                        data}, this.onEndChangeThresholdsDelegate, this.onChangeThresholdsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightWineMonitorApp.WineMonitorService.IWineMonitor CreateChannel() {
            return new WineMonitorClientChannel(this);
        }
        
        private class WineMonitorClientChannel : ChannelBase<SilverlightWineMonitorApp.WineMonitorService.IWineMonitor>, SilverlightWineMonitorApp.WineMonitorService.IWineMonitor {
            
            public WineMonitorClientChannel(System.ServiceModel.ClientBase<SilverlightWineMonitorApp.WineMonitorService.IWineMonitor> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSensorData(string cabinetId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cabinetId;
                System.IAsyncResult _result = base.BeginInvoke("GetSensorData", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightWineMonitorApp.WineMonitorService.WineSensorData EndGetSensorData(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightWineMonitorApp.WineMonitorService.WineSensorData _result = ((SilverlightWineMonitorApp.WineMonitorService.WineSensorData)(base.EndInvoke("GetSensorData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlert(string cabinetId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cabinetId;
                System.IAsyncResult _result = base.BeginInvoke("GetAlert", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightWineMonitorApp.WineMonitorService.AlertData EndGetAlert(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightWineMonitorApp.WineMonitorService.AlertData _result = ((SilverlightWineMonitorApp.WineMonitorService.AlertData)(base.EndInvoke("GetAlert", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetThresholdValues(string cabinetId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cabinetId;
                System.IAsyncResult _result = base.BeginInvoke("GetThresholdValues", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold EndGetThresholdValues(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold _result = ((SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold)(base.EndInvoke("GetThresholdValues", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWineSensorDataHistory(string cabinetId, System.DateTime dataSince, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cabinetId;
                _args[1] = dataSince;
                System.IAsyncResult _result = base.BeginInvoke("GetWineSensorDataHistory", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorData> EndGetWineSensorDataHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorData> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorData>)(base.EndInvoke("GetWineSensorDataHistory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlertHistory(string cabinetId, System.DateTime alertsSince, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cabinetId;
                _args[1] = alertsSince;
                System.IAsyncResult _result = base.BeginInvoke("GetAlertHistory", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.AlertData> EndGetAlertHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.AlertData> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.AlertData>)(base.EndInvoke("GetAlertHistory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetThresholdHistory(string cabinetId, System.DateTime changesSince, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cabinetId;
                _args[1] = changesSince;
                System.IAsyncResult _result = base.BeginInvoke("GetThresholdHistory", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold> EndGetThresholdHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold>)(base.EndInvoke("GetThresholdHistory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWineCabinets(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetWineCabinets", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.CabinetItem> EndGetWineCabinets(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.CabinetItem> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightWineMonitorApp.WineMonitorService.CabinetItem>)(base.EndInvoke("GetWineCabinets", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeThresholds(string cabinetId, SilverlightWineMonitorApp.WineMonitorService.WineSensorThreshold data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cabinetId;
                _args[1] = data;
                System.IAsyncResult _result = base.BeginInvoke("ChangeThresholds", _args, callback, asyncState);
                return _result;
            }
            
            public void EndChangeThresholds(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ChangeThresholds", _args, result);
            }
        }
    }
}
