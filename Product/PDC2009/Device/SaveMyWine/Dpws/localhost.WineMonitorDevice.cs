//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using System.Ext;
using System.Ext.Xml;
using Ws.ServiceModel;
using Ws.Services.Mtom;
using Ws.Services.Serialization;
using XmlElement = Ws.Services.Xml.WsXmlNode;
using XmlAttribute = Ws.Services.Xml.WsXmlAttribute;
using XmlConvert = Ws.Services.Serialization.WsXmlConvert;

namespace localhost.WineMonitorDevice
{
    
    
    [DataContract(Namespace="http://localhost/WineMonitorDevice/")]
    public class GetSensorData
    {
    }
    
    public class GetSensorDataDataContractSerializer : DataContractSerializer
    {
        
        public GetSensorDataDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public GetSensorDataDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            GetSensorData GetSensorDataField = null;
            if (IsParentStartElement(reader, false, true))
            {
                GetSensorDataField = new GetSensorData();
                reader.Read();
                reader.ReadEndElement();
            }
            return GetSensorDataField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            GetSensorData GetSensorDataField = ((GetSensorData)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://localhost/WineMonitorDevice/")]
    public class GetSensorDataResponse
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public schemas.datacontract.org.WineMonitorDevice.WineSensorData GetSensorDataResult;
    }
    
    public class GetSensorDataResponseDataContractSerializer : DataContractSerializer
    {
        
        public GetSensorDataResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public GetSensorDataResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            GetSensorDataResponse GetSensorDataResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                GetSensorDataResponseField = new GetSensorDataResponse();
                reader.Read();
                schemas.datacontract.org.WineMonitorDevice.WineSensorDataDataContractSerializer GetSensorDataResultDCS = new schemas.datacontract.org.WineMonitorDevice.WineSensorDataDataContractSerializer("GetSensorDataResult", "http://localhost/WineMonitorDevice/", "http://schemas.datacontract.org/2004/07/WineMonitorDevice");
                GetSensorDataResponseField.GetSensorDataResult = ((schemas.datacontract.org.WineMonitorDevice.WineSensorData)(GetSensorDataResultDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return GetSensorDataResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            GetSensorDataResponse GetSensorDataResponseField = ((GetSensorDataResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.WineMonitorDevice.WineSensorDataDataContractSerializer GetSensorDataResultDCS = new schemas.datacontract.org.WineMonitorDevice.WineSensorDataDataContractSerializer("GetSensorDataResult", "http://localhost/WineMonitorDevice/", "http://schemas.datacontract.org/2004/07/WineMonitorDevice");
                GetSensorDataResultDCS.WriteObject(writer, GetSensorDataResponseField.GetSensorDataResult);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [ServiceContract(Namespace="http://localhost/WineMonitorDevice/")]
    public interface IIWineMonitorRequest
    {
        
        [OperationContract(Action="http://localhost/WineMonitorDevice/IWineMonitorRequest/GetSensorData")]
        GetSensorDataResponse GetSensorData(GetSensorData req);
    }
}
namespace schemas.datacontract.org.WineMonitorDevice
{
    
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/WineMonitorDevice")]
    public class WineSensorData
    {
        
        [DataMember(Order=0, IsRequired=false)]
        public double Humidity;
        
        [DataMember(Order=1, IsRequired=false)]
        public double Temperature;
        
        [DataMember(Order=2, IsRequired=false)]
        public System.DateTime TimeStamp;
    }
    
    public class WineSensorDataDataContractSerializer : DataContractSerializer
    {
        
        public WineSensorDataDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public WineSensorDataDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            WineSensorData WineSensorDataField = null;
            if (IsParentStartElement(reader, false, true))
            {
                WineSensorDataField = new WineSensorData();
                reader.Read();
                if (IsChildStartElement(reader, "Humidity", false, false))
                {
                    reader.Read();
                    WineSensorDataField.Humidity = XmlConvert.ToDouble(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "Temperature", false, false))
                {
                    reader.Read();
                    WineSensorDataField.Temperature = XmlConvert.ToDouble(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "TimeStamp", false, false))
                {
                    reader.Read();
                    WineSensorDataField.TimeStamp = XmlConvert.ToDateTime(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return WineSensorDataField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            WineSensorData WineSensorDataField = ((WineSensorData)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "Humidity", false, false, WineSensorDataField.Humidity))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorDataField.Humidity));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "Temperature", false, false, WineSensorDataField.Temperature))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorDataField.Temperature));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "TimeStamp", false, false, WineSensorDataField.TimeStamp))
                {
                    writer.WriteString(XmlConvert.ToString(WineSensorDataField.TimeStamp));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
}
