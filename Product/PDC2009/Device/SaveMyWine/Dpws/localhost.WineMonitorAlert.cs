//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using System.Ext;
using System.Ext.Xml;
using Ws.ServiceModel;
using Ws.Services.Mtom;
using Ws.Services.Serialization;
using XmlElement = Ws.Services.Xml.WsXmlNode;
using XmlAttribute = Ws.Services.Xml.WsXmlAttribute;
using XmlConvert = Ws.Services.Serialization.WsXmlConvert;

namespace localhost.WineMonitorAlert
{
    
    
    [DataContract(Namespace="http://localhost/WineMonitorAlert")]
    public class Alert
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public schemas.datacontract.org.WineMonitorService.AlertData alert;
    }
    
    public class AlertDataContractSerializer : DataContractSerializer
    {
        
        public AlertDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public AlertDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            Alert AlertField = null;
            if (IsParentStartElement(reader, false, true))
            {
                AlertField = new Alert();
                reader.Read();
                schemas.datacontract.org.WineMonitorService.AlertDataDataContractSerializer alertDCS = new schemas.datacontract.org.WineMonitorService.AlertDataDataContractSerializer("alert", "http://localhost/WineMonitorAlert", "http://schemas.datacontract.org/2004/07/WineMonitorService");
                AlertField.alert = ((schemas.datacontract.org.WineMonitorService.AlertData)(alertDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return AlertField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            Alert AlertField = ((Alert)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.WineMonitorService.AlertDataDataContractSerializer alertDCS = new schemas.datacontract.org.WineMonitorService.AlertDataDataContractSerializer("alert", "http://localhost/WineMonitorAlert", "http://schemas.datacontract.org/2004/07/WineMonitorService");
                alertDCS.WriteObject(writer, AlertField.alert);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://localhost/WineMonitorAlert")]
    public class AlertResponse
    {
    }
    
    public class AlertResponseDataContractSerializer : DataContractSerializer
    {
        
        public AlertResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public AlertResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            AlertResponse AlertResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                AlertResponseField = new AlertResponse();
                reader.Read();
                reader.ReadEndElement();
            }
            return AlertResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            AlertResponse AlertResponseField = ((AlertResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [ServiceContract(Namespace="http://localhost/WineMonitorAlert")]
    public interface IIWineMonitorAlert
    {
        
        [OperationContract(Action="http://localhost/WineMonitorAlert/IWineMonitorAlert/Alert")]
        AlertResponse Alert(Alert req);
    }
}
namespace schemas.datacontract.org.WineMonitorService
{
    
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/WineMonitorService")]
    public enum AlertType
    {
        
        [EnumMember()]
        None,
        
        [EnumMember()]
        RadioFailure,
        
        [EnumMember()]
        TemperatureHigh,
        
        [EnumMember()]
        TemperatureLow,
        
        [EnumMember()]
        HumidityHigh,
        
        [EnumMember()]
        HumidityLow,
    }
    
    public class AlertTypeDataContractSerializer : DataContractSerializer
    {
        
        public AlertTypeDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public AlertTypeDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            AlertType AlertTypeField = 0;
            if (IsParentStartElement(reader, false, true))
            {
                AlertTypeField = new AlertType();
				switch(reader.ReadString())
				{
					case "None":
                		AlertTypeField = AlertType.None;
                		break;
					case "RadioFailure":
                		AlertTypeField = AlertType.RadioFailure;
                		break;
					case "TemperatureHigh":
                		AlertTypeField = AlertType.TemperatureHigh;
                		break;
					case "TemperatureLow":
                		AlertTypeField = AlertType.TemperatureLow;
                		break;
					case "HumidityHigh":
                		AlertTypeField = AlertType.HumidityHigh;
                		break;
					case "HumidityLow":
                		AlertTypeField = AlertType.HumidityLow;
                		break;
					default:
                		throw new XmlException();
				}
                reader.ReadEndElement();
            }
            return AlertTypeField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            AlertType AlertTypeField = ((AlertType)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
				switch(AlertTypeField)
				{
					case AlertType.None:
                		writer.WriteString("None");
                		break;
					case AlertType.RadioFailure:
                		writer.WriteString("RadioFailure");
                		break;
					case AlertType.TemperatureHigh:
                		writer.WriteString("TemperatureHigh");
                		break;
					case AlertType.TemperatureLow:
                		writer.WriteString("TemperatureLow");
                		break;
					case AlertType.HumidityHigh:
                		writer.WriteString("HumidityHigh");
                		break;
					case AlertType.HumidityLow:
                		writer.WriteString("HumidityLow");
                		break;
					default:
                		throw new XmlException();
				}
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/WineMonitorService")]
    public class AlertData
    {
        
        [DataMember(Order=0, IsRequired=false)]
        public AlertType Alert;
        
        [DataMember(Order=1, IsRequired=false)]
        public double AlertValue;
        
        [DataMember(Order=2, IsRequired=false)]
        public System.DateTime Timestamp;
    }
    
    public class AlertDataDataContractSerializer : DataContractSerializer
    {
        
        public AlertDataDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public AlertDataDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            AlertData AlertDataField = null;
            if (IsParentStartElement(reader, false, true))
            {
                AlertDataField = new AlertData();
                reader.Read();
                AlertTypeDataContractSerializer AlertDCS = new AlertTypeDataContractSerializer("Alert", "http://schemas.datacontract.org/2004/07/WineMonitorService", "http://schemas.datacontract.org/2004/07/WineMonitorService");
                AlertDataField.Alert = ((AlertType)(AlertDCS.ReadObject(reader)));
                if (IsChildStartElement(reader, "AlertValue", false, false))
                {
                    reader.Read();
                    AlertDataField.AlertValue = XmlConvert.ToDouble(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "Timestamp", false, false))
                {
                    reader.Read();
                    AlertDataField.Timestamp = XmlConvert.ToDateTime(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return AlertDataField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            AlertData AlertDataField = ((AlertData)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                AlertTypeDataContractSerializer AlertDCS = new AlertTypeDataContractSerializer("Alert", "http://schemas.datacontract.org/2004/07/WineMonitorService", "http://schemas.datacontract.org/2004/07/WineMonitorService");
                AlertDCS.WriteObject(writer, AlertDataField.Alert);
                if (WriteChildElement(writer, "AlertValue", false, false, AlertDataField.AlertValue))
                {
                    writer.WriteString(XmlConvert.ToString(AlertDataField.AlertValue));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "Timestamp", false, false, AlertDataField.Timestamp))
                {
                    writer.WriteString(XmlConvert.ToString(AlertDataField.Timestamp));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
}
